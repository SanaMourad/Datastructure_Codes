##################################dll.h##############################
#pragma once

#include <iostream>
using namespace std;


template <class T>
class DLList;

template <class T>
class DLLNode {
public:
    DLLNode(const T& val, DLLNode* next, DLLNode* prev);

    T get_val() const { return val; }
    void set_val(const T& val) { this->val = val; }
    DLLNode* get_next() const { return next; }
    DLLNode* get_prev() const { return prev; }
    
private:
    T val;
    DLLNode* next;
    DLLNode* prev;

    friend class DLList<T>;
};

template <class T>
DLLNode<T>::DLLNode(const T& val, DLLNode* next, DLLNode* prev)
{
    this->val = val;
    this->next = next;
    this->prev = prev;
}

// A doubly-linked list class to store elements of a generic type T
template <class T>
class DLList {
public:
    DLList();
    DLList(const DLList& other);
    ~DLList();

    bool is_empty() const;
    
    DLLNode<T>* head_node() const;
    DLLNode<T>* tail_node() const;
    T head_val() const;
    T tail_val() const;

    void add_to_head(const T& val);
    void add_to_tail(const T& val);
    void append(const DLList& otherList);
    
    void remove_head();
    void remove_tail();
    bool remove(const T& val);
    void clear();   

    bool contains(const T& val) const;
    DLList& operator=(const DLList& other);
    ///q#2
    DLList rmv_ret_negative();
    //Q#3
    void insert_before_after( T val, T insertVal, int c);
private:
    DLLNode<T>* head;
    DLLNode<T>* tail;
};



template <class T>
DLList<T>::DLList()
{
    head = nullptr;
    tail = nullptr;
}

template <class T>
DLList<T>::DLList(const DLList<T>& other) {
    head = nullptr;
    tail = nullptr;
    append(other);
}

template <class T>
DLList<T>::~DLList()
{
    clear();
}

template <class T>
void DLList<T>::clear()
{
    DLLNode<T>* tmp = head;
    DLLNode<T>* del_node;

    while (tmp != nullptr) {
        del_node = tmp;
        tmp = tmp->next;
        delete del_node;
    }

    head = nullptr;
    tail = nullptr;
}

template <class T>
bool DLList<T>::is_empty() const
{
    return head == nullptr;
}

template <class T>
void DLList<T>::add_to_head(const T& val)
{
    DLLNode<T>* new_node = new DLLNode<T>(val, head, nullptr);

    if (head != nullptr)
        head->prev = new_node;

    head = new_node;
    if (tail == nullptr)
        tail = new_node;
}

template <class T>
void DLList<T>::add_to_tail(const T& val)
{
    DLLNode<T>* new_node = new DLLNode<T>(val, nullptr, tail);

    if (tail != nullptr) //If list is non-empty
        tail->next = new_node;

    tail = new_node;
    if (head == nullptr)
        head = new_node;
}

template <class T>
void DLList<T>::remove_head()
{
    DLLNode<T>* del_node = head;

    if (is_empty())
        return;

    if (head == tail) // if only one node in list
        head = tail = nullptr;
    else {
        head = del_node->next;
        head->prev = nullptr;
    }
    delete del_node;
}

template <class T>
void DLList<T>::remove_tail()
{
    if (is_empty())
        return;

    DLLNode<T>* del_node = tail;

    if (head == tail) // if only one node in list
        head = tail = nullptr;
    else {
        tail = del_node->prev;
        tail->next = nullptr;   
    }

    delete del_node;
}

template <class T>
bool DLList<T>::remove(const T& val)
{
    if (is_empty())
        return false;

    if (val == head->val) {
        remove_head();
        return true;
    }

    if (val == tail->val) {
        remove_tail();
        return true;
    }

    // traverse list to find the node to be deleted
    for (DLLNode<T>* curr = head->next; curr != nullptr; curr = curr->next) {
        if (curr->val == val) {
            DLLNode<T>* pred = curr->prev;
            DLLNode<T>* succ = curr->next;
            pred->next = succ; 
            succ->prev = pred;
            delete curr;
            return true;
        }
    }

    return false;
}

template <class T>
bool DLList<T>::contains(const T& val) const
{
    DLLNode<T>* curr;

    for (curr = head; curr != nullptr; curr = curr->next) {
        if (curr->val == val)
            return true;
    }

    return false;
}

template <class T>
DLLNode<T>* DLList<T>::head_node() const
{
    return head;
}

template <class T>
DLLNode<T>* DLList<T>::tail_node() const 
{
    return tail;
}

template <class T>
T DLList<T>::head_val() const
{
    if (is_empty())
        throw string("ERROR: Attempting to retrieve a value of the head from an empty list.");
    
    return head->val;
}

template <class T>
T DLList<T>::tail_val() const 
{
    if (is_empty())
        throw string("ERROR: Attempting to retrieve a value of the tail from an empty list.");

    return tail->val;
}

template <class T>
void DLList<T>::append(const DLList& other)
{
    if (this == &other)
        throw string("ERROR: Can't append list to itself");

    for (DLLNode<T>* curr = other.head; curr != nullptr; curr = curr->next)
        add_to_tail(curr->val);
}

// copy assignment
template <class T>
DLList<T>& DLList<T>::operator=(const DLList<T>& other)
{
    if (this == &other)
        return *this;
 
    clear();
    append(other);

    return *this;
}

template<class T>
ostream& operator<<(ostream& out, const DLList<T>& list) {
    out << "[";

    DLLNode<T>* curr = list.head_node();
    while (curr != nullptr) {
        out << curr->get_val();
        if (curr->get_next() != nullptr)
            out << ", ";
        curr = curr->get_next();
    }
    out << "]";

    return out;
}
 //q1
 template<class T>
 int replaceVal(DLList<T> &list, T f, T r) {
     int counter=0;
     DLLNode <T>* temp= list.head_node();

     while(temp!= nullptr){
         if(temp->get_val()==f){
             temp->set_val(r);
             counter++;

         }

         temp=temp->get_next();

     }
     return counter;
 }

 
////////////////q2///////////////
//is empty []
// in head [-1,7,8,9,5,3]
//in tail [9,5,4,3,2,4,-1]
// [6,-4,6,8,-7,6]

template<class T>
 DLList<T> DLList<T>:: rmv_ret_negative(){
DLList <T> newNegatives;//to put all the  Negatives
//
if(is_empty()==true){
    return newNegatives;
}
//
while(head->val<0){
    newNegatives.add_to_tail(head->val);//add it to new list 
    remove_head();
    if (head==nullptr){ //after removig the head if it turend to empty list
        return newNegatives;

    }
}
//
while(tail->val<0){
    newNegatives.add_to_tail(tail->val);//add it to new list 
    remove_tail();

}
 //       

DLLNode <T>* temp= head->next;
while(temp->next!= nullptr){
    if(temp->val<0){
        newNegatives.add_to_tail(temp->val);
        DLLNode <T>* Ppoint=temp->prev;//extra pointer for the previous
        Ppoint->next=temp->next;
        temp->next->prev=Ppoint;
        Ppoint=temp;
        temp=temp->next;
        delete Ppoint;
        continue;// temp=temp->next; عشان ما يعمل هي كمان مرة
             
         }

         temp=temp->next;
     }
     return newNegatives;
       
        }
 
/////////////q3////////////
 
// is empty
// if contains // head==tail->>one node
              // head->val=val>>the val in head
             // tail->val=val>> the va in tail 
            // in the body 
// we dont have the val 

template <class T>
void DLList<T>::insert_before_after( T val, T insertVal, int c)
{
//
if (is_empty()){
    throw string("happy eid,the list is empty");
    }
// 
if(contains(val))
{ 
         if(head==tail){
    if(head->val==val){
        for(int i=0;i<c;i++){
            add_to_head(insertVal);
            add_to_tail(insertVal);
        }
    }
    return;
}

//in the head
        if(head->val==val){
            DLLNode<T>* Temp=head;
            //adding after
            for(int i=0;i<c;i++){
                    DLLNode<T>* Extra_Node=new DLLNode<T>(insertVal,head->next,head);
                    head->next=Extra_Node;
                    head->next->prev=Extra_Node;

            //adding before 
                   add_to_head(insertVal);
            
            }
            return;
                                }
//in tail
        if(tail->val==val){
            //adding before
            for(int i=0;i<c;i++){
                DLLNode<T>* Extra_Node=new DLLNode<T>(insertVal,tail,tail->prev);
                tail->prev=Extra_Node;
                tail->prev->next=Extra_Node;
                //adding after
                add_to_tail(insertVal);
            }
            return;
                                }

//body                              
        else{
            DLLNode<T>* Temp=head->next;
            while(Temp!=tail){
                if (Temp->val==val){
                    //adding after
                    for(int i=0;i<c;i++){
                    DLLNode<T>* Extra_Node=new DLLNode<T>(insertVal,Temp->next,Temp);
                    Temp->next=Extra_Node;
                    Temp->next->prev=Extra_Node;
                    
                                         }
                    //adding before
                    for(int i=0;i<c;i++){
                    DLLNode<T>* Extra_Node=new DLLNode<T>(insertVal,Temp,Temp->prev);
                    Temp->prev->next=Extra_Node;
                    Temp->prev=Extra_Node;
                    
                                         }
                    
                    
                }
                Temp=Temp->next;
            }
        }

}

else{
    throw  string("happy eid , we dont have the val");
}  
}      

##########################  main.cpp ##############################
#include "dll.h"

int main() {
    cout << "Testing!" << endl;
//q#1//
    DLList <int> sana;
    /*
    for(int i =-5;i<=5;i++){
        sana.add_to_tail(i);
    }
    cout<<sana<<endl;
    //replaceVal(sana, 5, 9);
    sana.rmv_ret_negative();
    cout<<sana<<endl;
*/

//q#2//
/*
sana.add_to_tail(-1);//one in head
sana.add_to_tail(3);
sana.add_to_tail(-6);
sana.add_to_tail(9);
sana.add_to_tail(-2);

cout<<sana<<endl;
cout<<"+++++++++++++++"<<endl;

cout<<sana.rmv_ret_negative()<<endl;//isempty
cout<<sana<<endl;
*/
//Q#3//
for(int i =0;i<=10;i++){
    sana.add_to_head(i);
  }
cout<<sana<<endl;
sana.insert_before_after( 4,  2,  3);
cout<<sana<<endl;
cout<<sana<<endl;
    return 0;
}


